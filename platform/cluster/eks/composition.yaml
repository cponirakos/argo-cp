apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xeks.k8s.platformref.crossplane.io
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "3"
  labels:
    cloud: aws
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: platformref.crossplane.io/v1alpha1
    kind: XK8s
  patchSets:
  - name: providerConfigAws
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerConfig.aws
      toFieldPath: spec.providerConfigRef.name
  resources:
    - name: kubernetesCluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        metadata:
          labels:
            resource: cluster
        spec:
          forProvider:
            region: us-west-2
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
            vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
            #version: "1.23" # With this remarked out or ommitted, the Region default Kubernetes version will be selected
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
        - fromFieldPath: spec.securityGroupIds
          toFieldPath: spec.forProvider.vpcConfig[0].securityGroupIds
        - fromFieldPath: spec.subnetIds
          toFieldPath: spec.forProvider.vpcConfig[0].subnetIds
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
          toFieldPath: status.values.oidcUrl
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
          toFieldPath: status.values.oidc
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: '^https?:\/\/(.*)'
                  group: 1
        - type: ToCompositeFieldPath
          fromFieldPath: spec.forProvider.roleArn
          toFieldPath: status.values.accountID
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: 'arn:aws:iam::(\d+):.*'
                  group: 1
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: status.values.clusterRef
    - name: kubernetesClusterAuth
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: ClusterAuth
        spec:
          forProvider:
            region: us-west-2
            clusterNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
        - fromFieldPath: spec.claim.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        - fromFieldPath: metadata.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig
          name: kubeconfig
          type: FromConnectionSecretKey
    - name: nodeGroupPublic
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        spec:
          forProvider:
            region: us-west-2
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
            subnetIdSelector:
              matchLabels:
                access: public
            scalingConfig:
              - desiredSize: 1
                minSize: 1
                maxSize: 100
            instanceTypes:
              - t3.medium
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
        - fromFieldPath: "spec.parameters.nodes.count"
          toFieldPath: "spec.forProvider.scalingConfig[0].desiredSize"
        - fromFieldPath: "spec.parameters.nodes.count"
          toFieldPath: "spec.forProvider.scalingConfig[0].minSize"
        - fromFieldPath: "spec.parameters.nodes.size"
          toFieldPath: "spec.forProvider.instanceTypes[0]"
          transforms:
            - type: map
              map:
                small: t3.small
                medium: t3.medium
                large: t3.large
        - fromFieldPath: "spec.id"
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]
### Create EKS cluster OIDC Provider
    - name: cluster-oidc-provider
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIdList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
        - fromFieldPath: status.values.oidcUrl
          toFieldPath: spec.forProvider.url
          policy:
            fromFieldPath: Required
### Configure cluster IAM
    - name: clusterRole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
    - name: clusterRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
    - name: nodegroupRole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: nodegroup
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
    - name: workerNodeRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
    - name: cniRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws
    - name: containerRegistryRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:
        - type: PatchSet
          patchSetName: providerConfigAws        
### Provider config for provider-helm
    - name: helm-providerConfig
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          # transforms:
          #   - string:
          #       fmt: '%s-ekscluster'
          #       type: Format
          #     type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - type: None
    # #Kubernertes ProviderConfig
    # - name: k8s-providerConfig
    #   base:
    #     apiVersion: kubernetes.crossplane.io/v1alpha1
    #     kind: ProviderConfig
    #     metadata:
    #       name: kubernetes-provider
    #     spec:
    #       credentials:
    #         source: Secret
    #         secretRef:
    #           key: kubeconfig
    #     patches:
    #     - fromFieldPath: spec.claim.namespace
    #       toFieldPath: spec.credentials.secretRef.namespace
    #     - fromFieldPath: metadata.name
    #       toFieldPath: spec.credentials.secretRef.name
    #       transforms:
    #         - type: string
    #           string:
    #             fmt: "%s-ekscluster"
    #     - type: ToCompositeFieldPath
    #       fromFieldPath: metadata.name 
    #       toFieldPath: status.values.providerConfig.helm
    #   readinessChecks:
    #     - type: None
    # #Namespace deployment on remote cluster
    # - name: namespace-deployment
    #   base:
    #     apiVersion: kubernetes.crossplane.io/v1alpha2
    #     kind: Object
    #     metadata:
    #       annotations:
    #         uptest.upbound.io/timeout: "60"
    #       name: dev-namespace
    #     spec:
    #       forProvider:
    #         manifest:
    #           apiVersion: v1
    #           kind: Namespace
    #           metadata:
    #             name: dev
    #       providerConfigRef:
    #         name: kubernetes-provider
    #       references:
    #         dependsOn:
    #           apiVersion: 
    #           name: kubernetesCluster